apiVersion: batch/v1
kind: Job
metadata:
  name: {{ cookiecutter.resource }}-service-migrations
spec:
  backoffLimit: 4
  template:
    spec:
      serviceAccountName: {{ cookiecutter.resource }}-service
      restartPolicy: Never
      imagePullSecrets:
        - name: registry-auth
      containers:
        - name: migrations
          image: ghcr.io/compada/{{ cookiecutter.resource }}-service:{{ cookiecutter.most_recent_image_tag }} # {"$imagepolicy": "flux-system:{{ cookiecutter.resource }}-service"}
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: {{ cookiecutter.resource }}-service-config
            - secretRef:
                name: {{ cookiecutter.resource }}-service-db-auth
          env:
            - name: DATABASE_URL
              value: "postgres://$(PGUSER):$(PGPASSWORD)@localhost:5432/$(PGDATABASE)"
          command: ["npx"]
          args: ["graphile-migrate", "migrate"]
        - name: cloud-sql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.33.0 # make sure the use the latest version
          imagePullPolicy: IfNotPresent
          command:
            - "/cloud_sql_proxy"
            # If connecting from a VPC-native GKE cluster, you can use the
            # following flag to have the proxy connect over private IP
            # - "-ip_address_types=PRIVATE"

            # By default, the proxy will write all logs to stderr. In some
            # environments, anything printed to stderr is consider an error. To
            # disable this behavior and write all logs to stdout (except errors
            # which will still go to stderr), use:
            - "-log_debug_stdout"
            # Replace DB_PORT with the port the proxy should listen on
            # Defaults: MySQL: 3306, Postgres: 5432, SQLServer: 1433
            - "-instances={{ cookiecutter.gcp_project_id }}:{{ cookiecutter.gcp_region }}:{{ cookiecutter.resource }}-service-db=tcp:5432"
          securityContext:
            # The default Cloud SQL proxy image runs as the
            # "nonroot" user and group (uid: 65532) by default.
            runAsNonRoot: true
          # You should use resource requests/limits as a best practice to prevent
          # pods from consuming too many resources and affecting the execution of
          # other pods. You should adjust the following values based on what your
          # application needs. For details, see
          # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          resources:
            requests:
              # The proxy's memory use scales linearly with the number of active
              # connections. Fewer open connections will use less memory. Adjust
              # this value based on your application's requirements.
              memory: "2Gi"
              # The proxy's CPU use scales linearly with the amount of IO between
              # the database and the application. Adjust this value based on your
              # application's requirements.
              cpu: "1"
            limits: {}
